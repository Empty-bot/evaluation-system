const Question = require('../models/Question');
const Response = require('../models/Response');
const Questionnaire = require("../models/Questionnaire");
const Users = require("../models/Users");
const sendEmail = require("../config/mailer");
const crypto = require("crypto");
const SALT_SECRET = process.env.SALT_SECRET || "random_salt"; // Utiliser un sel pour s√©curiser les hashes

const responseController = {
    async submitResponse(req, res) {
        try {
            const { questionnaire_id, question_id, answer } = req.body;
            const user_id = req.user.userId;

            // V√©rifier si le questionnaire est toujours ouvert
            const questionnaire = await Questionnaire.findById(questionnaire_id);
            if (!questionnaire) {
                return res.status(404).json({ error: "Questionnaire non trouv√©." });
            }
            if (questionnaire.status === "closed") {
                return res.status(403).json({ error: "Ce questionnaire est cl√¥tur√© et ne peut plus √™tre rempli." });
            }

            // V√©rifier si l'√©tudiant est inscrit au cours du questionnaire
            const isEnrolled = await Questionnaire.isStudentEnrolled(user_id, questionnaire_id);
            if (!isEnrolled) {
                return res.status(403).json({ error: "Vous n'√™tes pas inscrit √† ce cours." });
            }
    
            // V√©rifier si la question existe
            const question = await Question.findById(question_id);
            if (!question) {
                return res.status(400).json({ error: "La question sp√©cifi√©e n'existe pas." });
            }
    
            // Validation selon le type de question
            if (question.type === 'multiple_choice') {
                let possibleAnswers = question.possible_answers;
    
                // V√©rifier si c'est une cha√Æne JSON (et pas un tableau JavaScript)
                if (typeof possibleAnswers === 'string') {
                    possibleAnswers = JSON.parse(possibleAnswers); // Convertir en tableau JS
                }
    
    
                if (!possibleAnswers.includes(answer)) {
                    return res.status(400).json({ 
                        error: `R√©ponse invalide. Options valides : ${possibleAnswers.join(", ")}` 
                    });
                }
            }

            // G√©n√©rer un identifiant anonymis√© (SHA256)
            const anonymous_id = crypto.createHash("sha256")
                .update(`${user_id}-${questionnaire_id}-${SALT_SECRET}`)
                .digest("hex");

            // V√©rifier si l'√©tudiant a d√©j√† r√©pondu √† cette question
            const alreadyAnswered = await Response.hasAlreadyAnswered(anonymous_id, question_id);
            if (alreadyAnswered) {
                return res.status(400).json({ error: "Vous avez d√©j√† r√©pondu √† cette question." });
            }


            //Logs pour v√©rification
            console.log("üîç Debug - questionnaire_id:", questionnaire_id);
            console.log("üîç Debug - question_id:", question_id);
            console.log("üîç Debug - answer:", answer);
            console.log("üîç Debug - user_id:", req.user.userId);
            console.log("üîç Debug - anonymous_id:", anonymous_id);
            console.log("üîç Debug - Generated anonymous_id:", anonymous_id);


    
            const responseId = await Response.create({ anonymous_id, questionnaire_id, question_id, answer });

            // R√©cup√©rer les emails des admins
            const admins = await Users.findByRole("admin");

            // Envoyer un email aux admins
            admins.forEach(admin => {
                sendEmail(
                    admin.email,
                    `üìä Nouvelle r√©ponse soumise`,
                    `Un √©tudiant a r√©pondu √† un questionnaire. Connectez-vous pour voir les r√©sultats.`
                );
            });

            res.status(201).json({ message: "R√©ponse soumise avec succ√®s.", id: responseId });
    
        } catch (error) {
            console.error("‚ùå Erreur lors de la soumission :", error);
            res.status(500).json({ error: "Erreur lors de la soumission de la r√©ponse." });
        }
    },

    async getResponsesByQuestionnaire(req, res) {
        try {
            const { id } = req.params;


            console.log("üîç Debug - questionnaire_id:",id);

            const responses = await Response.findByQuestionnaire(id);

            console.log("üîç Debug - Responses found:", responses);

            // Ne pas montrer `anonymous_id`
            const anonymizedResponses = responses.map(r => ({
                question_id: r.question_id,
                label: r.label,
                answer: r.answer
            }));

            res.json(anonymizedResponses);
        } catch (error) {
            console.error("‚ùå Erreur lors de la r√©cup√©ration des r√©ponses :", error);
            res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des r√©ponses." });
        }
    },

    async getUserResponses(req, res) {
        try {
            const user_id = req.user.userId;
            const responses = await Response.findByUser(user_id);
            res.json(responses);
        } catch (error) {
            res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des r√©ponses utilisateur." });
        }
    }
};

module.exports = responseController;
