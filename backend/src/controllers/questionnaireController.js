const Questionnaire = require('../models/Questionnaire');
const Enrollment = require("../models/Enrollment");
const sendEmail = require("../config/mailer");
const Users = require("../models/Users");

const questionnaireController = {
    async getAll(req, res) {
        try {
            let questionnaires;
            if (req.user.role === "admin" || req.user.role === "quality_manager") {
                // L'admin voit tous les questionnaires
                questionnaires = await Questionnaire.findAll();
            } else if (req.user.role === "student") {
                // Un √©tudiant voit seulement les questionnaires de ses cours
                questionnaires = await Questionnaire.findByStudent(req.user.userId);
            } else {
                return res.status(403).json({ error: "Acc√®s refus√©." });
            }
            res.json(questionnaires);
        } catch (error) {
            res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des questionnaires." });
        }
    },

    async getById(req, res) {
        try {
            const questionnaire = await Questionnaire.findById(req.params.id);
            if (!questionnaire) {
                return res.status(404).json({ error: "Questionnaire non trouv√©." });
            }
            res.json(questionnaire);
        } catch (error) {
            res.status(500).json({ error: "Erreur lors de la r√©cup√©ration du questionnaire." });
        }
    },

    async create(req, res) {
        try {
            const { title, description, status, course_id } = req.body;
            const questionnaireId = await Questionnaire.create({ title, description, status, course_id });

            // R√©cup√©rer les √©tudiants inscrits au cours
            const students = await Users.findByCourse(course_id);

            // Envoyer un email uniquement aux √©tudiants du cours
            students.forEach(student => {
                sendEmail(
                    student.email,
                    `üìö Nouveau questionnaire disponible : ${title}`,
                    `Un nouveau questionnaire a √©t√© ajout√© pour votre cours. Connectez-vous pour r√©pondre.`
                );
            });

            res.status(201).json({ message: "Questionnaire cr√©√© et notifications envoy√©es avec succ√®s.", id: questionnaireId });
        } catch (error) {
            res.status(500).json({ error: "Erreur lors de la cr√©ation du questionnaire." });
        }
    },

    async update(req, res) {
        try {
            const { title, description, status, course_id } = req.body;
            const { id } = req.params;
    
            // V√©rifier si le questionnaire existe et r√©cup√©rer son statut actuel
            const questionnaire = await Questionnaire.findById(id);
            if (!questionnaire) {
                return res.status(404).json({ error: "Questionnaire non trouv√©." });
            }
    
            // Emp√™cher la modification des questionnaires publi√©s ou cl√¥tur√©s
            if (questionnaire.status !== "draft") {
                return res.status(403).json({ error: "Impossible de modifier un questionnaire publi√© ou cl√¥tur√©." });
            }
    
            // Mise √† jour du questionnaire
            const updated = await Questionnaire.update(id, { title, description, status, course_id });
            res.json({ message: "Questionnaire mis √† jour avec succ√®s." });
    
        } catch (error) {
            console.error("‚ùå Erreur lors de la mise √† jour du questionnaire :", error);
            res.status(500).json({ error: "Erreur lors de la mise √† jour du questionnaire." });
        }
    },

    async delete(req, res) {
        try {
            const deleted = await Questionnaire.delete(req.params.id);
            if (!deleted) {
                return res.status(404).json({ error: "Questionnaire non trouv√©." });
            }
            res.json({ message: "Questionnaire supprim√© avec succ√®s." });
        } catch (error) {
            res.status(500).json({ error: "Erreur lors de la suppression du questionnaire." });
        }
    },

    async closeUpdate(req, res) {
        try {
            const { id } = req.params;
            
            // V√©rifier si le questionnaire existe et r√©cup√©rer son statut actuel
            const questionnaire = await Questionnaire.findById(id);
            if (!questionnaire) {
                return res.status(404).json({ error: "Questionnaire non trouv√©." });
            }
    
            // Emp√™cher la fermeture des questionnaires d√©j√† cl√¥tur√©s ou en brouillon
            if (questionnaire.status === "closed") {
                return res.status(403).json({ error: "Le questionnaire est d√©j√† cl√¥tur√©." });
            }
            if (questionnaire.status === "draft") {
                return res.status(403).json({ error: "Impossible de cl√¥turer un questionnaire en brouillon." });
            }
    
            // Mise √† jour du statut du questionnaire
            const updated = await Questionnaire.closeUpdate(id);
            if (!updated) {
                return res.status(500).json({ error: "√âchec de la cl√¥ture du questionnaire." });
            }
            res.json({ message: "Questionnaire cl√¥tur√© avec succ√®s." });
            
        } catch (error) {
            console.error("‚ùå Erreur lors de la cl√¥ture du questionnaire :", error);
            res.status(500).json({ error: "Erreur lors de la cl√¥ture du questionnaire." });
        }
    }
};

module.exports = questionnaireController;
